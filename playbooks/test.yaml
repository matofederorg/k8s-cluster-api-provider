---
- name: E2E test
  hosts: all
  connection: local
  vars:
#    cloud_provider: "{{ cloud }}"  # inherited from the parent job
#    project_dir: "{{ ansible_user_dir }}/{{ zuul.project.src_dir }}"
#    project_tf_dir: "{{ project_dir }}/terraform"
    git_reference_default: "main"  # A fallback used when the git_reference variable is undefined and the pipeline is not executed on a PR
    git_repo_default: "https://github.com/SovereignCloudStack/k8s-cluster-api-provider.git"  # A fallback used when the git_repo variable is undefined and the pipeline is not executed on a PR
    # Some Kubernetes resources managed by the k8s-cluster-api-provider project employ names
    # formed by combining elements such as a prefix, cluster-name, and additional suffix.
    # This combined naming convention may potentially exceed the character limits imposed by
    # Kubernetes. To mitigate this issue, we take precautions by truncating both the prefix
    # and the cluster name to 12 characters each. This adjustment ensures that we stay
    # within Kubernetes' limits and allows us to utilize a single OpenStack project with
    # multiple k8s-capi deployments.
    pr_or_main: "{{ 'pr' + zuul.change if zuul.change is defined else 'main' }}"
    prefix: "{{ (pr_or_main + '-' + zuul.build) | truncate(12, True, '') }}"
    testcluster_name: "{{ (pr_or_main + '-' + zuul.build) | truncate(12, True, '') }}"
  environment:
#    ENVIRONMENT: "{{ cloud_provider }}"
#    PATH: "{{ ansible_user_dir }}/.local/bin:{{ ansible_env.PATH }}"
  tasks:
  - name: Prepare environment
    block:
    - name: Get PR details
      uri:
        url: "https://api.github.com/repos/{{ zuul.project.name }}/pulls/{{ zuul.change }}"
        body_format: json
        headers:
          Accept: application/vnd.github+json
          X-GitHub-Api-Version: 2022-11-28
      register: pull_request
      when: zuul.change is defined  # execute only when e2e pipeline is triggered on PR
    - name: |
        Set facts -
        Priority is given to the values of git_reference and git_repo over variables collected from the PR.
        In cases where git_reference and git_repo are undefined, and e2e is not executed on the PR, a fallback mechanism is employed.
      set_fact:
        git_branch_name: "{{ git_reference | default(pull_request.json.head.ref) | default(git_reference_default) }}"
        git_repository_url: "{{ git_repo | default(pull_request.json.head.repo.clone_url) | default(git_repo_default) }}"
    - debug:
        msg: "{{ git_branch_name }}"
    - debug:
        msg: "{{ git_repository_url }}"
#       - name: Execute sonobouy
#         command: 'echo "2023-08-31T13:58:59Z
#             PLUGIN     STATUS   RESULT   COUNT                 PROGRESS
#            e2e   complete   passed       1   Passed:360, Failed:  0
#             systemd-logs   complete   passed       4
#
#          Sonobuoy has completed. Use `sonobuoy retrieve` to get results.
#          === Collecting results ===
#          plahpl
#          plakdad
#          dadad
#          dsada"'
#         register: sonobouy_results
#       - name: Force a failure in middle of always! >:-)
#         ansible.builtin.command: /bin/false
#
#       - name: Never print this
#         ansible.builtin.debug:
#           msg: 'I never execute, due to the above task failing, :-('
#     always:
#       - name: Print always
#         ansible.builtin.debug:
#           msg: 'alwaysalwaysalwaysalways'
#         when: sonobouy_results is defined
#         ignore_errors: true  # ignore when this task failed as it is nice to have, and we should ensure that fullclean is reached
#       - name: Force a failure in middle of always! >:-)
#         ansible.builtin.command: /bin/false
#         when: sonobouy_results is defined
#         ignore_errors: true  # ignore when this task failed as it is nice to have, and we should ensure that fullclean is reached
#       - name: Print sonobouy results
#         ansible.builtin.debug:
#           msg: "{{ sonobouy_results }}"
#       - name: Parse sonobouy results
#         set_fact:
#           sonobouy_results_parsed: "{{ sonobouy_results.stdout | regex_search('=== Collecting results ===[\\S\\s]*') }}"
#         when:
#         - sonobouy_results is defined
#         ignore_errors: true  # ignore when this task failed as it is nice to have, and we should ensure that fullclean is reached
#       - name: Insert parsed sonobouy results to the warning message that will be appended to the comment zuul leaves on the PR
#         ansible.builtin.debug:
#           msg:
#                 - "<details>\n  <summary><b>Sonobouy results</b></summary>\n{{ sonobouy_results_parsed }}\n</details>"
#         when: sonobouy_results_parsed is defined and sonobouy_results_parsed | length > 0
#         ignore_errors: true  # ignore when this task failed as it is nice to have, and we should ensure that fullclean is reached
#       - name: Always do this
#         ansible.builtin.debug:
#           msg: "This always executes"